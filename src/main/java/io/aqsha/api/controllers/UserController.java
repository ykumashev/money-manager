package io.aqsha.api.controllers;

import io.aqsha.api.exceptions.UserNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import io.aqsha.api.models.User;
import io.aqsha.api.repositories.UserRepository;

import java.util.Optional;

@Controller
@RequestMapping(path="/user")
public class UserController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	public UserController() {

	}

	// Get all users
	@GetMapping(path="")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	// Get user with the given id
	@GetMapping(path="/{id}")
	public @ResponseBody User getUser(@PathVariable long id) {
		Optional<User> user = userRepository.findById(id);
		if (!user.isPresent()) {
			throw new UserNotFoundException("User with ID - " + id + " doesn't exist");
		}
		return user.get();
	}

	// Delete user with the given id
	@DeleteMapping(path = "/{id}")
	public @ResponseBody String deleteUser(@PathVariable long id){
		userRepository.deleteById(id);
		return "Deleted";
	}

	// Creates new user
	@PostMapping(path="") //dont forget '?' after user
	public @ResponseBody String createUser (@RequestParam String name,
											@RequestParam String email) {
//		User userExist = userRepository.
		User n = new User();
		n.setName(name);
		n.setEmail(email);
		userRepository.save(n);
		return "Saved"; //"redirect:/welcome"
	}

	// Updates user information
	@PutMapping(path="/{id}")
	public @ResponseBody String updateUser (@RequestParam(value = "name", required=false) final String name,
											@RequestParam(value = "email", required=false) final String email,
//											@RequestParam(value = "newId", required=false) final long newId
											@PathVariable long id) {
		Optional<User> optionalUser = userRepository.findById(id);
		if (!optionalUser.isPresent()) {
			throw new UserNotFoundException("User with ID - " + id + " doesn't exist");
		}
		User user = optionalUser.get();

		if (name != null) {
			user.setName(name);
		}

		if (email != null) {
			user.setEmail(email);
		}

		userRepository.save(user);
		return "Updated";
	}
}